AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      BackupRetentionPeriod: '1'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: mysql
      MasterUsername: root
      MasterUserPassword: !Ref EnvConfigmySQLPasswordAsString
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      EngineVersion: '8.0'
      MultiAZ: false
      StorageType: gp2
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
    Metadata:
      StackeryName: New MySQL
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: Database
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: Database
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: New MySQL
      VpcId: !Ref DefaultVPCId
  UpdateMySQL:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateMySQL
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: UpdateMySQL
      CodeUri: src/updateMySQL
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 900
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          DB_ID: !Ref Database
          DB_ADDRESS: !GetAtt Database.Endpoint.Address
          DB_PORT: !GetAtt Database.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}
          DB_USER: !Ref EnvConfigmySQLUserAsString
          DB_PASSWORD: !Ref EnvConfigmySQLPasswordAsString
    Metadata:
      StackeryName: UpdateMySQL
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: RestAPI
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /{any+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestAPI.Arn}/invocations
              responses: {}
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestAPI.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
    Metadata:
      StackeryName: RestAPI
  RestAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RestAPI
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RestAPI
      CodeUri: src/restAPI
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          DB_ID: !Ref Database
          DB_ADDRESS: !GetAtt Database.Endpoint.Address
          DB_PORT: !GetAtt Database.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}
          DB_USER: !Ref EnvConfigmySQLUserAsString
          DB_PASSWORD: !Ref EnvConfigmySQLPasswordAsString
          SERVER_HOSTNAME: !Ref EnvConfigapiHostNameAsString
          SERVER_PROTOCOL: https
      Events:
        ApiANYany:
          Type: Api
          Properties:
            Path: /{any+}
            Method: ANY
            RestApiId: !Ref Api
        ApiANY:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Api
    Metadata:
      StackeryName: RestAPI
  DeployFrontEnd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeployFrontEnd
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: DeployFrontEnd
      CodeUri: src/deployFrontEnd
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 900
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref EmberApp
      Environment:
        Variables:
          BUCKET_NAME: !Ref EmberApp
          BUCKET_ARN: !GetAtt EmberApp.Arn
          API_URL: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}
    Metadata:
      StackeryName: DeployFrontEnd
  DeployFrontEndDeployTrigger:
    Type: Custom::FunctionDeployTrigger
    Properties:
      ServiceToken: !GetAtt DeployFrontEnd.Arn
      DeploymentTimestamp: !Ref DeploymentTimestamp
  EmberApp:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-emberapp
      WebsiteConfiguration:
        IndexDocument: index.html
    Metadata:
      StackeryName: EmberApp
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  EnvConfigmySQLPasswordAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/mySQLPassword
  EnvConfigmySQLUserAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/mySQLUser
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  EnvConfigapiHostNameAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/apiHostName
  DeploymentTimestamp:
    Type: Number
    Description: Deployment preparation timestamp in milliseconds Since Epoch (injected by Stackery at deployment time)
Metadata:
  EnvConfigParameters:
    EnvConfigmySQLPasswordAsString: mySQLPassword
    EnvConfigmySQLUserAsString: mySQLUser
    EnvConfigapiHostNameAsString: apiHostName